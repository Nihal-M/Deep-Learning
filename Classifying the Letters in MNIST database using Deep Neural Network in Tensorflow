#Tensorflow MNIST
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets(".", one_hot= True , reshape=False)

#Learning Parameters
import tensorflow as tf
learning_rate = 0.001
training_epochs = 1
batch_size = 128
display_step = 1

n_input = 28*28
n_classes = 10

#Hidden Layer Parameter
n_hidden_layer = 256 #no of features in hidden layer

#initializing weights and biases

weights = {
    'hidden_layer': tf.Variable(tf.random_normal([n_input, n_hidden_layer])),
    'out': tf.Variable(tf.random_normal([n_hidden_layer, n_classes]))
}
biases = {
    'hidden_layer': tf.Variable(tf.random_normal([n_hidden_layer])),
    'out': tf.Variable(tf.random_normal([n_classes]))
}

#INPUT
x = tf.placeholder("float",[None ,28 , 28, 1])
y = tf.placeholder("float",[None ,n_classes	])

x_flat = tf.reshape(x , [-1,n_input])

#Multilayer Perceptron

layer_1 = tf.add(tf.matmul(x_flat,weights('hidden_layer'),biases['hidden_layer']))
layer_1 = tf.nn.relu(layer_1)

logits = tf.add(tf.matmul(weights('hidden_layer'), weights('out')),biases['out'])

#Optimizer
cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(cost)

# Initializing the variables
init = tf.global_variables_initializer()


# Launching the graph
with tf.Session() as sess:
    sess.run(init)
    # Training cycle
    for epoch in range(training_epochs):
        total_batch = int(mnist.train.num_examples/batch_size)
        # Loop over all batches
        for i in range(total_batch):
            batch_x, batch_y = mnist.train.next_batch(batch_size)
            sess.run(optimizer, feed_dict={x: batch_x, y: batch_y})
